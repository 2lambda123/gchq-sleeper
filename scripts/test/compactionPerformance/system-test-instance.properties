#
# Copyright 2022-2023 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#################################################################################
#                           SLEEPER INSTANCE PROPERTIES                         #
#################################################################################

###################
# Template Values #
###################

# AWS account number
sleeper.account=changeme

# AWS region to deploy to
sleeper.region=changeme

# A string to uniquely identify this deployment
sleeper.id=changeme

# The S3 bucket containing your jar files
sleeper.jars.bucket=changeme

# The name of the repository for the compaction container. The Docker image from the compaction-job-execution module
# should have been uploaded to an ECR repository of this name in this account.
sleeper.compaction.repo=changeme

# The name of the repository for the ingest container. The Docker image from the ingest module should have been
# uploaded to an ECR repository of this name in this account.
sleeper.ingest.repo=changeme

# The name of the bulk import repo containing spark and bulk import code
sleeper.bulk.import.eks.repo=changeme

# The id of the VPC to deploy to
sleeper.vpc=changeme

# A comma separated list of subnets to deploy to. ECS tasks will be run across multiple subnets. EMR
# clusters will be deployed in a subnet chosen when the cluster is created.
sleeper.subnets=changeme

##################
# Default Values #
##################

# Logging level for sleeper classes
sleeper.logging.level=debug

# The optional stacks to deploy - DataAndMetadata & Topic are also included.
sleeper.optional.stacks=SystemTestStack,CompactionStack,IngestStack

# Whether to keep the sleeper table bucket, Dynamo tables related to tables and query results bucket or not.
sleeper.retain.infra.after.destroy=false

# The CPU architecture to run compaction tasks on.
# See Task CPU architecture at https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html
sleeper.compaction.task.cpu.architecture=X86_64

# The CPU and memory for a compaction task. Which of these are used will depend on the chosen CPU architecture.
# See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-cpu-memory-error.html for valid options.
sleeper.compaction.task.x86.cpu=1024
sleeper.compaction.task.x86.memory=4096

# The maximum number of simultaneous connections to S3 from a single client
sleeper.s3.max-connections=25

# The number of files to read in a compaction job. Note that the state store
# must support atomic updates for this many files. For the DynamoDBStateStore this
# is 11.
# (NB This does not apply to splitting jobs which will run even if there is only 1 file.)
sleeper.compaction.files.batch.size=11

# The way in which records are held in memory before they are written to a local store
# Valid values are 'arraylist' and 'arrow'
sleeper.ingest.record.batch.type=arrow

# The way in which partition files are written to the main Sleeper store
# Valid values are 'direct' (which writes using the s3a Hadoop file system) and 'async' (which writes locally and then
# copies the completed Parquet file asynchronously into S3)
sleeper.ingest.partition.file.writer.type=async

# The number of bytes to allocate to the Arrow working buffer, which is used for sorting and other sundry activities (arrow only) [256MB]
sleeper.ingest.arrow.working.buffer.bytes=268435456

# The number of bytes to allocate to the Arrow batch buffer, which is used to hold the records (arrow only) [1GB]
sleeper.ingest.arrow.batch.buffer.bytes=1073741824

# The maximum number of bytes to store on the local disk before uploading to the main Sleeper store (arrow only) [2GB]
sleeper.ingest.arrow.max.local.store.bytes=2147483648

# The number of records to write at once into an Arrow file in the local store. A single Arrow file will be written to
# multiple times and so this parameter does not affect the final size of the Arrow file (arrow only) [1K]
sleeper.ingest.arrow.max.single.write.to.file.records=1024

# The implementation of the async S3 client to use for upload during ingest.
# Valid values are 'java' or 'crt'. This determines the implementation of S3AsyncClient that gets used.
# With 'java' it makes a single PutObject request for each file.
# With 'crt' it uses the AWS Common Runtime (CRT) to make multipart uploads.
# Note that the CRT option is recommended. Using the Java option may cause failures if any file is >5GB in size, and
# will lead to the following warning:
# "The provided S3AsyncClient is not an instance of S3CrtAsyncClient, and thus multipart upload/download feature is not
# enabled and resumable file upload is not supported. To benefit from maximum throughput, consider using
# S3AsyncClient.crtBuilder().build() instead."
# (async partition file writer only)
sleeper.ingest.async.client.type=crt

# The part size in bytes to use for multipart uploads.
# (CRT async ingest only) [128MB]
sleeper.ingest.async.crt.part.size.bytes=134217728

# The target throughput for multipart uploads, in GB/s. Determines how many parts should be uploaded simultaneously.
# (CRT async ingest only)
sleeper.ingest.async.crt.target.throughput.gbps=10

########################################################################################
#                              System Test Properties                                  #
########################################################################################

# The ingest mode to write random data. This should be either 'direct', 'queue', or 'generate_only'.
# 'Direct' means that the data is written directly using an ingest coordinator.
# 'Queue' means that the data is written to a Parquet file and an ingest job is created and posted to the ingest queue.
# 'Generate_only' means that the data is written to a Parquet file in the table data bucket, but the 
# file is not ingested. The ingest will have to be performed manually in a seperate step.
sleeper.systemtest.ingest.mode=queue

# The number of containers that write random data
sleeper.systemtest.writers=110

# The number of random records that each container should write
sleeper.systemtest.records-per-writer=40000000

# The minimum value of integers generated randomly during random record generation
sleeper.systemtest.random.int.min=0

# The maximum value of integers generated randomly during random record generation
sleeper.systemtest.random.int.max=100000000

# The minimum value of longs generated randomly during random record generation
sleeper.systemtest.random.long.min=0

# The maximum value of longs generated randomly during random record generation
sleeper.systemtest.random.long.max=10000000000

# The length of strings generated randomly during random record generation
sleeper.systemtest.random.string.length=10

# The length of byte arrays generated randomly during random record generation
sleeper.systemtest.random.bytearray.length=10

# The maximum number of entries in maps generated randomly during random record generation
# (the number of entries in the map will range randomly from 0 to this number)
sleeper.systemtest.random.map.length=10

# The maximum number of entries in lists generated randomly during random record generation
# (the number of entries in the list will range randomly from 0 to this number)
sleeper.systemtest.random.list.length=10

# The image in ECR used for writing random data to the system
sleeper.systemtest.repo=changeme
