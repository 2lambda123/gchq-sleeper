#
# Copyright 2022-2023 Crown Copyright
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#################################################################################
#                           SLEEPER INSTANCE PROPERTIES                         #
#################################################################################

###################
# Template Values #
###################

# AWS account number
sleeper.account=changeme

# AWS region to deploy to
sleeper.region=changeme

# A string to uniquely identify this deployment
sleeper.id=changeme

# The S3 bucket containing your jar files
sleeper.jars.bucket=changeme

# The name of the repository for the compaction container. The Docker image from the compaction-job-execution module
# should have been uploaded to an ECR repository of this name in this account.
sleeper.compaction.repo=changeme

# The name of the repository for the ingest container. The Docker image from the ingest module should have been
# uploaded to an ECR repository of this name in this account.
sleeper.ingest.repo=changeme

# The name of the bulk import repo containing spark and bulk import code
sleeper.bulk.import.eks.repo=changeme

# The id of the VPC to deploy to
sleeper.vpc=changeme

# The subnet to deploy tasks to
sleeper.subnet=changeme

##################
# Default Values #
##################

# Logging level for sleeper classes
sleeper.logging.level=debug

# The optional stacks to deploy - DataAndMetadata & Topic are also included.
sleeper.optional.stacks=IngestStack,EmrBulkImportStack,IngestBatcherStack

# Whether to keep the sleeper table bucket, Dynamo tables related to tables and query results bucket or not.
sleeper.retain.infra.after.destroy=false

# Partitions with more than the following number of records in will be split
# Set to 4 billion so that one round of splitting compactions happen
sleeper.default.partition.splitting.threshold=4000000000

# How often partition splitting should happen
sleeper.partition.splitting.period.minutes=10

# The frequency with which the garbage collector is run
sleeper.gc.period.minutes=5

# The frequency with which a compaction job sends keep alive messages to the job queue
sleeper.compaction.keepalive.period.seconds=600

# The way in which partition files are written to the main Sleeper store
# Valid values are 'direct' (which writes using the s3a Hadoop file system) and 'async' (which writes locally and then
# copies the completed Parquet file asynchronously into S3)
sleeper.ingest.partition.file.writer.type=async

# Specifies the minimum total file size required for an ingest job to be batched and sent. An ingest
# job will be created if the batcher runs while this much data is waiting, and the minimum number of
# files is also met.
sleeper.default.ingest.batcher.job.min.size=1K

# Specifies the maximum number of files for a job in the ingest batcher. If more files are waiting than this, they will
# be split into multiple jobs. It's possible some data may be left for a future run of the batcher if some recent files 
# overflow the size of a job but aren't enough to create a job on their own.
sleeper.default.ingest.batcher.job.max.files=3

# Specifies the minimum number of leaf partitions that are needed to run a bulk import job. If this
# minimum has not been reached, bulk import jobs will refuse to start
sleeper.default.bulk.import.min.leaf.partitions=1

########################################################################################
#                              System Test Properties                                  #
########################################################################################

# The ingest mode to write random data. This should be either 'direct', 'queue', or 'generate_only'.
# 'Direct' means that the data is written directly using an ingest coordinator.
# 'Queue' means that the data is written to a Parquet file and an ingest job is created and posted to the ingest queue.
# 'Generate_only' means that the data is written to a Parquet file in the table data bucket, but the 
# file is not ingested. The ingest will have to be performed manually in a seperate step.
sleeper.systemtest.ingest.mode=queue

# The number of containers that write random data
sleeper.systemtest.writers=110

# The number of random records that each container should write
sleeper.systemtest.records-per-writer=40000000

# The image in ECR used for writing random data to the system
sleeper.systemtest.repo=changeme
