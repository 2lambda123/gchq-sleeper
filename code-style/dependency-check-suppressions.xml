<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2022-2023 Crown Copyright
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
    <suppress>
        <notes><![CDATA[
        Spark is suppressed as the version we are able to use is restricted by support in AWS EMR:
        https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apache\.spark/.*$</packageUrl>
        <cpe>cpe:/a:apache:spark:3.4.1</cpe>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Spark is suppressed as the version we are able to use is restricted by support in AWS EMR:
        https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html

        Some of the Spark dependencies were not identified by the Spark CPE, so we've added this to catch
        several shaded dependencies.
        ]]></notes>
        <filePath regex="true">^.*/spark-[^/]+-3\.4\.1\.jar/.*$</filePath>
        <vulnerabilityName regex="true">.*</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Hadoop is suppressed as the version we are able to use is restricted by support in AWS EMR:
        https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apache\.hadoop/.*$</packageUrl>
        <cpe>cpe:/a:apache:hadoop:3.3.3</cpe>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Hadoop is suppressed as the version we are able to use is restricted by support in AWS EMR:
        https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html

        Some of the Hadoop dependencies were not identified by the Hadoop CPE, so we've added this to catch
        several shaded dependencies.
        ]]></notes>
        <filePath regex="true">^.*/hadoop-client-[^/]+-3\.3\.3\.jar/.*$</filePath>
        <vulnerabilityName regex="true">.*</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        The version of Hadoop we're using uses an old version of Jackson, with old Maven artifacts that don't have a
        fixed version.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.codehaus\.jackson/jackson\-mapper\-asl@.*$</packageUrl>
        <vulnerabilityName>CVE-2017-7525</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        The version of Hadoop we're using uses an old version of Jackson, with old Maven artifacts that don't have a
        fixed version.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.codehaus\.jackson/jackson\-mapper\-asl@.*$</packageUrl>
        <vulnerabilityName>CVE-2019-10172</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        The version of Hadoop we're using uses an old version of OkHttp, with old Maven artifacts that don't have a
        fixed version.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/com\.squareup\.okhttp/okhttp@.*$</packageUrl>
        <vulnerabilityName>CVE-2021-0341</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        The version of Athena we're using uses an old version of Bouncy Castle Provider, with an old Maven artifact that
        doesn't have a fixed version.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.bouncycastle/bcprov\-jdk15on@.*$</packageUrl>
        <vulnerabilityName>CVE-2023-33201</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        The AWS CDK uses Javascript code with a vulnerable NPM package. Once there's a version of the CDK that doesn't,
        we can use that instead.
        file name: cdk-asset-awscli-v1-2.2.200.jar: asset-awscli-v1@2.2.200.jsii.tgz: asset-awscli-v1@2.2.200.jsii.tar: layer.zip: endpoint-rule-set-1.json.gz
        ]]></notes>
        <filePath regex="true">^.*/cdk-asset-awscli-v1-2\.2\.200\.jar/.*$</filePath>
        <cve>CVE-2021-23497</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        The AWS CDK uses a vulnerable Ruby gem. Once there's a version of the CDK that doesn't, we can use that instead.
        file name: cdk-asset-awscli-v1-2.2.200.jar: asset-awscli-v1@2.2.200.jsii.tgz: asset-awscli-v1@2.2.200.jsii.tar: layer.zip: endpoint-rule-set-1.json.gz
        ]]></notes>
        <filePath regex="true">^.*/cdk-asset-awscli-v1-2\.2\.200\.jar/.*$</filePath>
        <cve>CVE-2020-10663</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        This seems to be a false positive where dependency check is reporting the CVE against the wrong artifact.
        The CVE states the vulnerability is in the AWS S3 SDK before version 1.12.261.
        We're using a version of that library that has the fix.
        The aws-crt library is still used with the same version after the fix was applied in the S3 SDK.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/software\.amazon\.awssdk\.crt/aws\-crt@.*$</packageUrl>
        <cve>CVE-2022-31159</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        At time of writing, the latest version of Avro IPC uses an old version of jQuery in its static pages for stats.
        We don't expose that page, so it won't be a problem.
        This is a provided dependency for the module bulk-import/bulk-import-runner.
        ]]></notes>
        <filePath regex="true">^.*/avro-ipc-1\.11\.2\.jar/.*/jquery-.*\.js$</filePath>
        <vulnerabilityName regex="true">.*</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        This seems to be a false positive as the CVE is for the Go implementation of Avro, which we're not using.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apache\.avro/avro\-(ipc|mapred)@.*$</packageUrl>
        <cve>CVE-2023-37475</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Spark SQL integrates with Apache Hive, but we don't use it.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apache\.hive/hive\-storage\-api@.*$</packageUrl>
        <cve>CVE-2021-34538</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        This is a stack overflow caused by trying to build JSON from a data structure with cyclic dependencies.
        There's no version of Jackson available with a fix yet, and it seems very unlikely that there's a case where
        this could happen in Sleeper.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/com\.fasterxml\.jackson\.core/jackson\-databind@.*$</packageUrl>
        <cve>CVE-2023-35116</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        This is a false positive. According to the issue linked on the CVE, the problem is limited to the
        okhttp-brotli library, which we don't use.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/com\.squareup\.(okhttp3|okhttp)/okhttp@.*$</packageUrl>
        <cve>CVE-2023-3782</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        The problem here is that Netty does not enable hostname verification by default. This is still a problem in the
        latest version of Netty. We don't use this directly. It's a dependency for Spark, Athena, and AWS clients,
        eg. for S3.

        There isn't a fixed version of Netty, and the libraries we're using may configure hostname verification
        correctly. We may see CVEs against those libraries separately if this doesn't get fixed.

        It's not clear how we would solve this ourselves, and the relevant network calls all happen within a private
        VPC.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/io\.netty/netty\-handler@.*$</packageUrl>
        <vulnerabilityName>CVE-2023-4586</vulnerabilityName>
    </suppress>
</suppressions>