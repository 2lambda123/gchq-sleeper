name: Local Docker
on:
  push:
    paths:
      - '.github/workflows/docker-local.yaml'
      - 'java/pom.xml'
      - 'java/cdk-environment/**'
      - 'scripts/local/**'
      - 'scripts/functions/**'

env:
  IMAGE_NAME: sleeper-local

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: java/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Resolve dependencies
        run: mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies -Dmaven.repo.local=../.m2/repository
        working-directory: ./java/cdk-environment
      - name: Plan build
        run: |
          # This code came from GitHub Docs, to publish a 'latest' tag built from the main branch,
          # and a tag for each Git tagged version starting with 'v'. See here:
          # https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-a-registry-using-a-personal-access-token

          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          DEPLOYMENT_IMAGE_ID="ghcr.io/${{ github.repository_owner }}/sleeper-deployment"

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo "$IMAGE_ID" | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo "$VERSION" | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          echo "DEPLOYMENT_IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Maven build
        run: ./scripts/local/buildMaven.sh -Dmaven.repo.local=../.m2/repository
      - name: Docker build
        run: |
          echo "$DEPLOYMENT_IMAGE_ID:$VERSION" > ./scripts/local/deploymentImage.txt \
          ./scripts/local/buildDocker.sh --tag $IMAGE_NAME \
            --label "git-commit=$GITHUB_SHA" \
            --label "build-url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
      - name: Log in to registry
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
      - name: Push image
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        run: |
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      - name: Delete old images
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        working-directory: ./java/build
        run: |
          echo "token=${{ secrets.GITHUB_TOKEN }}" >> delete.properties
          echo "organization=${{ github.repository_owner }}" >> delete.properties
          echo "packageName=$IMAGE_NAME" >> delete.properties
          echo "ignoreTagsPattern=^(latest|[0-9.]+)$" >> delete.properties
          echo "keepMostRecent=4" >> delete.properties
          mvn compile exec:java -q -e -Dexec.mainClass=sleeper.build.github.api.containers.DeleteGHCRVersions \
            -Dmaven.repo.local=../.m2/repository \
            -Dexec.args=delete.properties \
