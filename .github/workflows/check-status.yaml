name: Chunk Build Status
on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Query Athena chunk
        id: athena
        uses: LASER-Yi/workflow-status@v0.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: chunk-athena.yaml
          branch: ${{ github.ref_name }}
      - name: Query Bulk Import chunk
        id: bulk-import
        uses: LASER-Yi/workflow-status@v0.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: chunk-bulk-import.yaml
          branch: ${{ github.ref_name }}
      - name: Query CDK chunk
        id: cdk
        uses: LASER-Yi/workflow-status@v0.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: chunk-cdk.yaml
          branch: ${{ github.ref_name }}
      - name: Query Clients chunk
        id: clients
        uses: LASER-Yi/workflow-status@v0.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: chunk-clients.yaml
          branch: ${{ github.ref_name }}
      - name: Query Common chunk
        id: common
        uses: LASER-Yi/workflow-status@v0.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: chunk-common.yaml
          branch: ${{ github.ref_name }}
      - name: Query Compaction chunk
        id: compaction
        uses: LASER-Yi/workflow-status@v0.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: chunk-compaction.yaml
          branch: ${{ github.ref_name }}
      - name: Query Data chunk
        id: data
        uses: LASER-Yi/workflow-status@v0.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: chunk-data.yaml
          branch: ${{ github.ref_name }}
      - name: Query Ingest chunk
        id: ingest
        uses: LASER-Yi/workflow-status@v0.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: chunk-ingest.yaml
          branch: ${{ github.ref_name }}
      - name: Query Query chunk
        id: query
        uses: LASER-Yi/workflow-status@v0.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: chunk-query.yaml
          branch: ${{ github.ref_name }}
      - name: Query State Store chunk
        id: statestore
        uses: LASER-Yi/workflow-status@v0.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: chunk-statestore.yaml
          branch: ${{ github.ref_name }}
      - name: Report results
        working-directory: ./java/build
        run: |
          echo "chunks=athena,bulk-import,cdk,clients,common,compaction,data,ingest,query,statestore" >> status.properties
          echo "athena.status=${{ steps.athena.outputs.status }}" >> status.properties
          echo "athena.conclusion=${{ steps.athena.outputs.conclusion }}" >> status.properties
          echo "bulk-import.status=${{ steps.bulk-import.outputs.status }}" >> status.properties
          echo "bulk-import.conclusion=${{ steps.bulk-import.outputs.conclusion }}" >> status.properties
          echo "cdk.status=${{ steps.cdk.outputs.status }}" >> status.properties
          echo "cdk.conclusion=${{ steps.cdk.outputs.conclusion }}" >> status.properties
          echo "clients.status=${{ steps.clients.outputs.status }}" >> status.properties
          echo "clients.conclusion=${{ steps.clients.outputs.conclusion }}" >> status.properties
          echo "common.status=${{ steps.common.outputs.status }}" >> status.properties
          echo "common.conclusion=${{ steps.common.outputs.conclusion }}" >> status.properties
          echo "compaction.status=${{ steps.compaction.outputs.status }}" >> status.properties
          echo "compaction.conclusion=${{ steps.compaction.outputs.conclusion }}" >> status.properties
          echo "data.status=${{ steps.data.outputs.status }}" >> status.properties
          echo "data.conclusion=${{ steps.data.outputs.conclusion }}" >> status.properties
          echo "ingest.status=${{ steps.ingest.outputs.status }}" >> status.properties
          echo "ingest.conclusion=${{ steps.ingest.outputs.conclusion }}" >> status.properties
          echo "query.status=${{ steps.query.outputs.status }}" >> status.properties
          echo "query.conclusion=${{ steps.query.outputs.conclusion }}" >> status.properties
          echo "statestore.status=${{ steps.statestore.outputs.status }}" >> status.properties
          echo "statestore.conclusion=${{ steps.statestore.outputs.conclusion }}" >> status.properties
          mvn exec:java -Dexec.mainClass=sleeper.build.status.CheckGitHubStatus -Dexec.args=status.properties
